package gui;

import domain.FoodItem;
import gui.calculator.CalculatorForm;
import gui.side_dish.SideDishForm;
import gui.recipe.*;
import gui.advice.*;
import java.util.List;
import javax.swing.JTable;
import javax.swing.table.TableModel;
import service.imp.FoodItemServiceImp;
import table.TableFoodItem;
import service.FoodItemService;

/**
 *
 * @author Marko Milosevic
 */
public class MainForm extends javax.swing.JFrame {
    
    private final FoodItemService foodItemService;

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        foodItemService = new FoodItemServiceImp();
        populateTable();
        setTable();
        setExtendedState(MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlSearch = new javax.swing.JPanel();
        lblCriteria = new javax.swing.JLabel();
        comboCriteria = new javax.swing.JComboBox<>();
        lblValue = new javax.swing.JLabel();
        txtValue = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        pnlTable = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFoodItem = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuRecipe = new javax.swing.JMenu();
        menuBeverage = new javax.swing.JMenuItem();
        menuSoup = new javax.swing.JMenuItem();
        menuSauce = new javax.swing.JMenuItem();
        menuEggDish = new javax.swing.JMenuItem();
        menuFishDish = new javax.swing.JMenuItem();
        menuMeatDishFromTheGrill = new javax.swing.JMenuItem();
        menuMeatDishAndMeatProduct = new javax.swing.JMenuItem();
        menuVegetableDish = new javax.swing.JMenuItem();
        menuComplexDish = new javax.swing.JMenuItem();
        menuSalad = new javax.swing.JMenuItem();
        menuSweet = new javax.swing.JMenuItem();
        menuReadyMadeIndustrialMeal = new javax.swing.JMenuItem();
        menuSideDish = new javax.swing.JMenu();
        menuImportantFoodItems = new javax.swing.JMenuItem();
        menuAdvice = new javax.swing.JMenu();
        menuPracticalAdvice = new javax.swing.JMenuItem();
        menuTable = new javax.swing.JMenuItem();
        menuThermalProcessing = new javax.swing.JMenuItem();
        menuLosses = new javax.swing.JMenuItem();
        menuDefinition = new javax.swing.JMenuItem();
        menuBMI = new javax.swing.JMenu();
        menuCalculator = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Recepture za pripremanje jela");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        lblCriteria.setText("Kriterijum pretrage:");

        comboCriteria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "naziv", "energetska vrednost kJ", "energetska vrednost Cal", "belancevine", "masti", "ugljeni hidrati", "kalcijum", "gvozdje", "vitamin A", "vitamin B1", "vitamin B2", "niacin", "vitamin C" }));

        lblValue.setText("Vrednost namirnice za pretragu:");

        btnSearch.setText("Pretrazi");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlSearchLayout = new javax.swing.GroupLayout(pnlSearch);
        pnlSearch.setLayout(pnlSearchLayout);
        pnlSearchLayout.setHorizontalGroup(
            pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCriteria)
                .addGap(18, 18, 18)
                .addComponent(comboCriteria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblValue)
                .addGap(18, 18, 18)
                .addComponent(txtValue, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSearch)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlSearchLayout.setVerticalGroup(
            pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCriteria)
                    .addComponent(comboCriteria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblValue)
                    .addComponent(txtValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        pnlTable.setBorder(javax.swing.BorderFactory.createTitledBorder("Tablica energetske i bioloske vrednosti namirnica (u 100 g) - Osnovni hranljivi sastojci (belancevine, masti i ugljeni hidrati) iskazani su u gramima, a zastitni hranljivi sastojci (minerali i vitamini) u miligramima -"));

        tblFoodItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblFoodItem);

        javax.swing.GroupLayout pnlTableLayout = new javax.swing.GroupLayout(pnlTable);
        pnlTable.setLayout(pnlTableLayout);
        pnlTableLayout.setHorizontalGroup(
            pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        pnlTableLayout.setVerticalGroup(
            pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
        );

        menuRecipe.setText("Recepture");

        menuBeverage.setText("Napici");
        menuBeverage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBeverageActionPerformed(evt);
            }
        });
        menuRecipe.add(menuBeverage);

        menuSoup.setText("Supe, corbe i ulosci");
        menuSoup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSoupActionPerformed(evt);
            }
        });
        menuRecipe.add(menuSoup);

        menuSauce.setText("Sosovi");
        menuSauce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSauceActionPerformed(evt);
            }
        });
        menuRecipe.add(menuSauce);

        menuEggDish.setText("Jela od jaja");
        menuEggDish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEggDishActionPerformed(evt);
            }
        });
        menuRecipe.add(menuEggDish);

        menuFishDish.setText("Jela od ribe");
        menuFishDish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFishDishActionPerformed(evt);
            }
        });
        menuRecipe.add(menuFishDish);

        menuMeatDishFromTheGrill.setText("Jela od mesa sa rostilja");
        menuMeatDishFromTheGrill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuMeatDishFromTheGrillActionPerformed(evt);
            }
        });
        menuRecipe.add(menuMeatDishFromTheGrill);

        menuMeatDishAndMeatProduct.setText("Jela od mesa i proizvodi od mesa");
        menuMeatDishAndMeatProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuMeatDishAndMeatProductActionPerformed(evt);
            }
        });
        menuRecipe.add(menuMeatDishAndMeatProduct);

        menuVegetableDish.setText("Samostalna jela i prilozi od povrca i variva");
        menuVegetableDish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuVegetableDishActionPerformed(evt);
            }
        });
        menuRecipe.add(menuVegetableDish);

        menuComplexDish.setText("Slozena jela");
        menuComplexDish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuComplexDishActionPerformed(evt);
            }
        });
        menuRecipe.add(menuComplexDish);

        menuSalad.setText("Salate");
        menuSalad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSaladActionPerformed(evt);
            }
        });
        menuRecipe.add(menuSalad);

        menuSweet.setText("Kompoti, slatka jela i slatkisi, pite");
        menuSweet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSweetActionPerformed(evt);
            }
        });
        menuRecipe.add(menuSweet);

        menuReadyMadeIndustrialMeal.setText("Gotova industrijska jela (sterilisana)");
        menuReadyMadeIndustrialMeal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuReadyMadeIndustrialMealActionPerformed(evt);
            }
        });
        menuRecipe.add(menuReadyMadeIndustrialMeal);

        jMenuBar1.add(menuRecipe);

        menuSideDish.setText("Namirnice uz jela iz receptura");

        menuImportantFoodItems.setText("Vaznije namirnice uz jela iz receptura");
        menuImportantFoodItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuImportantFoodItemsActionPerformed(evt);
            }
        });
        menuSideDish.add(menuImportantFoodItems);

        jMenuBar1.add(menuSideDish);

        menuAdvice.setText("Saveti i strucni izrazi");

        menuPracticalAdvice.setText("Neki prakticni saveti");
        menuPracticalAdvice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPracticalAdviceActionPerformed(evt);
            }
        });
        menuAdvice.add(menuPracticalAdvice);

        menuTable.setText("Odnos tezina/zapremina");
        menuTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuTableActionPerformed(evt);
            }
        });
        menuAdvice.add(menuTable);

        menuThermalProcessing.setText("Termicka obrada jela");
        menuThermalProcessing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuThermalProcessingActionPerformed(evt);
            }
        });
        menuAdvice.add(menuThermalProcessing);

        menuLosses.setText("Gubici prilikom termalne obrade");
        menuLosses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuLossesActionPerformed(evt);
            }
        });
        menuAdvice.add(menuLosses);

        menuDefinition.setText("Strucni izrazi");
        menuDefinition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuDefinitionActionPerformed(evt);
            }
        });
        menuAdvice.add(menuDefinition);

        jMenuBar1.add(menuAdvice);

        menuBMI.setText("Izracunaj indeks telesne mase");

        menuCalculator.setText("Kalkulator");
        menuCalculator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCalculatorActionPerformed(evt);
            }
        });
        menuBMI.add(menuCalculator);

        jMenuBar1.add(menuBMI);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        try {
            String text = txtValue.getText().trim(); // uzmi vrednost za pretragu po izabranom kriterijumu komboboksa
            List<FoodItem> foodItems = foodItemService.getAll(); // podrazumevana vrednost je cela lista iz baze
            if (!text.isEmpty()) {
                if (comboCriteria.getSelectedItem().equals("naziv")) {
                    foodItems = foodItemService.getByName(text);
                } else if (comboCriteria.getSelectedItem().equals("energetska vrednost kJ")) {
                    foodItems = foodItemService.getByEnergyValueKJ(text);
                } else if (comboCriteria.getSelectedItem().equals("energetska vrednost Cal")) {
                    foodItems = foodItemService.getByEnergyValueCal(text);
                } else if (comboCriteria.getSelectedItem().equals("belancevine")) {
                    foodItems = foodItemService.getByProtein(text);
                } else if (comboCriteria.getSelectedItem().equals("masti")) {
                    foodItems = foodItemService.getByFats(text);
                } else if (comboCriteria.getSelectedItem().equals("ugljeni hidrati")) {
                    foodItems = foodItemService.getByCarbohydrates(text);
                } else if (comboCriteria.getSelectedItem().equals("kalcijum")) {
                    foodItems = foodItemService.getByCalcium(text);
                } else if (comboCriteria.getSelectedItem().equals("gvozdje")) {
                    foodItems = foodItemService.getByIron(text);
                } else if (comboCriteria.getSelectedItem().equals("vitamin A")) {
                    foodItems = foodItemService.getByVitaminA(text);
                } else if (comboCriteria.getSelectedItem().equals("vitamin B1")) {
                    foodItems = foodItemService.getByVitaminB1(text);
                } else if (comboCriteria.getSelectedItem().equals("vitamin B2")) {
                    foodItems = foodItemService.getByVitaminB2(text);
                } else if (comboCriteria.getSelectedItem().equals("niacin")) {
                    foodItems = foodItemService.getByNiacin(text);
                } else {
                    foodItems = foodItemService.getByVitaminC(text);
                }
            } else { // vrsi se pretraga po izabranom kriterijumu komboboksa i vraca liste gde je vrednost null  
                if (comboCriteria.getSelectedItem().equals("energetska vrednost kJ")) {
                    foodItems = foodItemService.getNullEnergyValueKJ();
                } else if (comboCriteria.getSelectedItem().equals("energetska vrednost Cal")) {
                    foodItems = foodItemService.getNullEnergyValueCal();
                } else if (comboCriteria.getSelectedItem().equals("belancevine")) {
                    foodItems = foodItemService.getNullProtein();
                } else if (comboCriteria.getSelectedItem().equals("masti")) {
                    foodItems = foodItemService.getNullFats();
                } else if (comboCriteria.getSelectedItem().equals("ugljeni hidrati")) {
                    foodItems = foodItemService.getNullCarbohydrates();
                } else if (comboCriteria.getSelectedItem().equals("kalcijum")) {
                    foodItems = foodItemService.getNullCalcium();
                } else if (comboCriteria.getSelectedItem().equals("gvozdje")) {
                    foodItems = foodItemService.getNullIron();
                } else if (comboCriteria.getSelectedItem().equals("vitamin A")) {
                    foodItems = foodItemService.getNullVitaminA();
                } else if (comboCriteria.getSelectedItem().equals("vitamin B1")) {
                    foodItems = foodItemService.getNullVitaminB1();
                } else if (comboCriteria.getSelectedItem().equals("vitamin B2")) {
                    foodItems = foodItemService.getNullVitaminB2();
                } else if (comboCriteria.getSelectedItem().equals("niacin")) {
                    foodItems = foodItemService.getNullNiacin();
                } else if (comboCriteria.getSelectedItem().equals("vitamin C")) {
                    foodItems = foodItemService.getNullVitaminC();
                }
            }
            TableModel tm = new TableFoodItem(foodItems); // popuni tabelu podacima iz liste
            tblFoodItem.setModel(tm);
            setTable();
        } catch (Exception ex) {
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        populateTable();
    }//GEN-LAST:event_formWindowActivated

    private void menuCalculatorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCalculatorActionPerformed
        new CalculatorForm(this, true).setVisible(true);
    }//GEN-LAST:event_menuCalculatorActionPerformed

    private void menuPracticalAdviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPracticalAdviceActionPerformed
        new AdviceForm(this, true).setVisible(true);
    }//GEN-LAST:event_menuPracticalAdviceActionPerformed

    private void menuTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuTableActionPerformed
        new FoodItemAnnexForm(this, true).setVisible(true);
    }//GEN-LAST:event_menuTableActionPerformed

    private void menuThermalProcessingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuThermalProcessingActionPerformed
        new ThermalProcessingForm(this, true).setVisible(true);
    }//GEN-LAST:event_menuThermalProcessingActionPerformed

    private void menuLossesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuLossesActionPerformed
        new LossesDuringThermalTreatmentForm(this, true).setVisible(true);
    }//GEN-LAST:event_menuLossesActionPerformed

    private void menuDefinitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuDefinitionActionPerformed
        new TechnicalTermForm(this, true).setVisible(true);
    }//GEN-LAST:event_menuDefinitionActionPerformed

    private void menuImportantFoodItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuImportantFoodItemsActionPerformed
        new SideDishForm(this, true).setVisible(true);
    }//GEN-LAST:event_menuImportantFoodItemsActionPerformed

    private void menuBeverageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBeverageActionPerformed
        new BeverageForm(this, true).setVisible(true);
    }//GEN-LAST:event_menuBeverageActionPerformed

    private void menuSoupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSoupActionPerformed
        new SoupForm(this, true).setVisible(true);
    }//GEN-LAST:event_menuSoupActionPerformed

    private void menuSauceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSauceActionPerformed
        new SauceForm(this, true).setVisible(true);
    }//GEN-LAST:event_menuSauceActionPerformed

    private void menuEggDishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEggDishActionPerformed
        new EggDishForm(this, true).setVisible(true);
    }//GEN-LAST:event_menuEggDishActionPerformed

    private void menuFishDishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFishDishActionPerformed
        new FishDishForm(this, true).setVisible(true);
    }//GEN-LAST:event_menuFishDishActionPerformed

    private void menuMeatDishFromTheGrillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuMeatDishFromTheGrillActionPerformed
        new MeatDishFromTheGrillForm(this, true).setVisible(true);
    }//GEN-LAST:event_menuMeatDishFromTheGrillActionPerformed

    private void menuMeatDishAndMeatProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuMeatDishAndMeatProductActionPerformed
        new MeatDishAndMeatProductForm(this, true).setVisible(true);
    }//GEN-LAST:event_menuMeatDishAndMeatProductActionPerformed

    private void menuVegetableDishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuVegetableDishActionPerformed
        new VegetableDishForm(this, true).setVisible(true);
    }//GEN-LAST:event_menuVegetableDishActionPerformed

    private void menuComplexDishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuComplexDishActionPerformed
        new ComplexDishForm(this, true).setVisible(true);
    }//GEN-LAST:event_menuComplexDishActionPerformed

    private void menuSaladActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSaladActionPerformed
        new SaladForm(this, true).setVisible(true);
    }//GEN-LAST:event_menuSaladActionPerformed

    private void menuSweetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSweetActionPerformed
        new SweetForm(this, true).setVisible(true);
    }//GEN-LAST:event_menuSweetActionPerformed

    private void menuReadyMadeIndustrialMealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuReadyMadeIndustrialMealActionPerformed
        new ReadyMadeIndustrialMealForm(this, true).setVisible(true);
    }//GEN-LAST:event_menuReadyMadeIndustrialMealActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> comboCriteria;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCriteria;
    private javax.swing.JLabel lblValue;
    private javax.swing.JMenu menuAdvice;
    private javax.swing.JMenu menuBMI;
    private javax.swing.JMenuItem menuBeverage;
    private javax.swing.JMenuItem menuCalculator;
    private javax.swing.JMenuItem menuComplexDish;
    private javax.swing.JMenuItem menuDefinition;
    private javax.swing.JMenuItem menuEggDish;
    private javax.swing.JMenuItem menuFishDish;
    private javax.swing.JMenuItem menuImportantFoodItems;
    private javax.swing.JMenuItem menuLosses;
    private javax.swing.JMenuItem menuMeatDishAndMeatProduct;
    private javax.swing.JMenuItem menuMeatDishFromTheGrill;
    private javax.swing.JMenuItem menuPracticalAdvice;
    private javax.swing.JMenuItem menuReadyMadeIndustrialMeal;
    private javax.swing.JMenu menuRecipe;
    private javax.swing.JMenuItem menuSalad;
    private javax.swing.JMenuItem menuSauce;
    private javax.swing.JMenu menuSideDish;
    private javax.swing.JMenuItem menuSoup;
    private javax.swing.JMenuItem menuSweet;
    private javax.swing.JMenuItem menuTable;
    private javax.swing.JMenuItem menuThermalProcessing;
    private javax.swing.JMenuItem menuVegetableDish;
    private javax.swing.JPanel pnlSearch;
    private javax.swing.JPanel pnlTable;
    private javax.swing.JTable tblFoodItem;
    private javax.swing.JTextField txtValue;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        // popuni tabelu sa podacima iz baze pozivanjem metode iz servisa
        try {
            List<FoodItem> foodItems = foodItemService.getAll();
            TableModel tm = new TableFoodItem(foodItems);
            tblFoodItem.setModel(tm);
            setTable();
        } catch (Exception ex) {
        }
    }
    
    private void setTable() {
        // podesi duzinu svakog polja - kolone u tabeli
        tblFoodItem.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tblFoodItem.getColumnModel().getColumn(0).setPreferredWidth(27);
        tblFoodItem.getColumnModel().getColumn(1).setPreferredWidth(314);
        tblFoodItem.getColumnModel().getColumn(2).setPreferredWidth(116);
        tblFoodItem.getColumnModel().getColumn(3).setPreferredWidth(125);
        tblFoodItem.getColumnModel().getColumn(4).setPreferredWidth(80);
        tblFoodItem.getColumnModel().getColumn(5).setPreferredWidth(50);
        tblFoodItem.getColumnModel().getColumn(6).setPreferredWidth(86);
        tblFoodItem.getColumnModel().getColumn(7).setPreferredWidth(68);
        tblFoodItem.getColumnModel().getColumn(8).setPreferredWidth(57);
        tblFoodItem.getColumnModel().getColumn(9).setPreferredWidth(77);
        tblFoodItem.getColumnModel().getColumn(10).setPreferredWidth(77);
        tblFoodItem.getColumnModel().getColumn(11).setPreferredWidth(77);
        tblFoodItem.getColumnModel().getColumn(12).setPreferredWidth(77);
        tblFoodItem.getColumnModel().getColumn(13).setPreferredWidth(77);
    }
    
}
